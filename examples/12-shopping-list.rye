fyne: import\go "fyne"
app: import\go "fyne/app"
widget: import\go "fyne/widget"
container: import\go "fyne/container"
theme: import\go "fyne/theme"
layout: import\go "fyne/layout"

; Simple data management
tasks: ref [
    [ false "Goat cheese" ]
    [ false "Eggs" ]
    [ false "Oats" ]
    [ false "Anchovies" ]
    [ false "Bread" ]
    [ false "A4 paper" ]
]

; Rye is mostly immutable, we are working
; on state management solution
Data: context {
    add!: fn { task } {
        print "* Adding" probe task 
    }
    remove!: fn { idx } { 
        print "* Removing" probe idx 
    }
    check!: fn { idx val } { 
        print "* Checking" probe [ idx val ]
    }
}

lst: widget/list
    does { tasks .deref .length? }
    does {
        container/hbox [
            widget/check "" fn { v } { }  ; will be updated with proper callback
            widget/label ""
            layout/spacer
            widget/button-with-icon "" theme/delete-icon fn { } { }  ; will be updated
        ]
    }
    fn { i box } {
        tasks .deref -> i :task 
        box .objects? -> 0 :chk
        box .objects? -> 1 :lbl
        box .objects? -> 3 :btn
        
        chk .set-checked 0 <- task
        lbl .set-text 1 <- task
        
        ; Update callbacks with current index
        chk .on-changed! fn { v } { Data/check! i v }
        btn .on-tapped! fn { } { Data/remove! i , lst .refresh }
    }

input: widget/entry
input .set-place-holder "Add to list here ..."
input .on-submitted! fn { x } {
    Data/add! x
    input .set-text ""
    lst .refresh
}

cont: container/border nil input nil nil [ lst ]

a: app/new
w: a .window "Shopping List"
w .resize fyne/size 300.0 300.0
w .set-content cont
w .show-and-run
