
rye .needs { fyne }

myctx: context { do load %buttons_my.rye }

current-ctx: ?current

do\par fyne { 

	win: app .window "Buttons app"
	gw: grid-wrap size 120.0 36.0 { }	
	spl: h-split gw lbl: label "" ,
	spl .offset! 0.6
	
	for lc\data\ myctx { ::w
		extends myctx {
			fnc: ?w
			gw .add button to-string w
			  fn\par { } current-ctx
			    { set-text lbl capture-stdout [ fnc ] }
		}
	}
	
	with win {
		.resize size 450.0 350.0 ,
		.set-content spl , 
		.show-and-run
	}
}
















; 			if w .val .type? = 'function {
;				fnc: ?w
;				gw .add button to-string w
;				fn\par { } current-ctx { set-text lbl capture-stdout [ fnc ] }
;			}
; for lc\data\ myctx { ::w
;     gw .add button to-string w fn\par { } myctx [ 'set-text 'lbl 'capture-stdout [ w ] ]
; }
;	for lc\data\ myctx { ::w
;		gw .add button to-string w closure { } { set-text lbl capture-stdout { do { probe w } } }
;	}

;	for lc\vals\ myctx { ::f
;		gw .add button to-string w does combine { set-text lbl capture-stdout apply ?f { } }   ; where f are closures
;	}



; TODO:
; add apply built-in
; have lc\words lc\vals and ly\words\ lc\vals\
; think about a concept of a stub a word or a value that caries it's context with it
; make evaluator evaluate function in ab xlock of code