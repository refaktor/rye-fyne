rye .needs { fyne }

do\in fyne {
	win: app .window "Calculator"

    label-a: label ""
    label-b: label ""
    label-op: label ""
    label-eq: label ""
    label-res: label ""
    btn-dot: button "." fn { } { }
    btn-copy: button-with-icon "" content-copy-icon fn { } { }
    op: fn { x y } { 0 }
    text-a: ""
    text-b: ""
    text-res: ""
    current:: 0

    format-decimal: fn { x } {
        x-str: math/round\to x 4 |to-string
        produce\while { ::s all {
            contains s "."
            any { "0" = last s "." = last s }
        } } x-str {
            ::s
            s .head s .length? - 1
        }
    }

    update: fn { } {
        if current = 1 {
            either any { text-a = "" text-b = "" } {
                label-eq .set-text ""
                change! "" 'text-res
            } {
                a: text-a .to-decimal
                b: text-b .to-decimal
                res: op a b
                change! format-decimal res 'text-res
                label-eq .set-text "="
            }
        }
        label-a .set-text text-a
        label-b .set-text text-b
        label-res .set-text text-res

        text: either current = 0 text-a text-b
        either contains text "." { btn-dot .disable } { btn-dot .enable }
        either text-res = "" { btn-copy .disable } { btn-copy .enable }
    }

    eval: fn { } {
        change! text-res 'text-a
        change! "" 'text-res
        change! "" 'text-b
        label-op .set-text ""
        label-eq .set-text ""
        change! 0 'current
        update
    }

    set-op: fn { symbol opfn } {
        if current = 1 {
            eval
        }
        if all {
           current = 0
           text-a .length? > 0
        } {
            change! closure { x y } { opfn x y } 'op ; TODO: figure out why `change! opfn 'op` doesn't work
            label-op .set-text symbol
            change! 1 'current
        }
        update
    }

    change-current-text: fn { f } {
        text: either current = 0 text-a text-b
        new-text: f text
        change! new-text 'text
        change! text either current = 0 'text-a 'text-b
        update
    }

    make-num-button: fn { n } {
        button n closure { } {
            change-current-text fn { text } { text + n }
        }
    }

    btn-dot .on-tapped! fn { } {
        change-current-text fn { text } {
            either text = "" {
                "0."
            } {
                either contains text "." { text } { text + "." }
            }
        }
    }

    btn-copy .on-tapped! fn { } {
        if not text-res = "" {
            win .clipboard .set-content text-res
        }
    }
    btn-copy .disable

	win
	|set-content border
        h-box [ label-a label-op label-b label-eq label-res ]
        nil nil nil
        [ grid-with-columns 4 [
            btn-copy
            button "C" fn { } {
                change! 0 'current
                change! "" 'text-a
                change! "" 'text-b
                change! "" 'text-res
                label-op .set-text ""
                label-eq .set-text ""
                update
            }
            button "Del" fn { } {
                either all { current = 1 text-b = "" } {
                    change! 0 'current
                    label-op .set-text ""
                    update
                } {
                    change-current-text fn { text } {
                        new-len: text .length? - 1
                        new-text: text .head new-len
                        if new-text = "-" {
                            dec! 'new-len
                            change! new-text .head new-len 'new-text
                        }
                        new-text
                    }
                }
            }
            button "+" fn { } {
                set-op "+" fn { x y } { x + y }
            }

            make-num-button "7"
            make-num-button "8"
            make-num-button "9"
            button "-" fn { } {
                set-op "-" fn { x y } { x - y }
            }

            make-num-button "4"
            make-num-button "5"
            make-num-button "6"
            button "*" fn { } {
                set-op "*" fn { x y } { x * y }
            }

            make-num-button "1"
            make-num-button "2"
            make-num-button "3"
            button "/" fn { } {
                set-op "/" fn { x y } { x / y }
            }

            button "+/-" fn { } {
                change-current-text fn { text } {
                    either text = "" {
                        ""
                    } {
                        format-decimal 0 - text .to-decimal
                    }
                }
            }
            make-num-button "0"
            btn-dot
            button "=" fn { } {
                eval
            }
        ] ]
    |resize size 300.0 300.0
	|show-and-run
}
